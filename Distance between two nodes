#include <iostream>
#include <vector>
#include <queue>

using namespace std;

const int N = 100000;
vector<int> edges[N];
int dist[N];
bool used[N];

void bfs(int s, int t) {
    queue<int> q;
    q.push(s);
    used[s] = true;
    dist[s] = 0;

    while (!q.empty()) {
        int v = q.front();
        q.pop();

        for (int i = 0; i < edges[v].size(); i++) {
            int u = edges[v][i];
            if (!used[u]) {
                used[u] = true;
                q.push(u);
                dist[u] = dist[v] + 1;
                if (u == t) {
                    return;
                }
            }
        }
    }
}

int main() {
    int n, m;
    cin >> n >> m;

    for (int i = 0; i < m; i++) {
        int a, b;
        cin >> a >> b;
        edges[a].push_back(b);
        edges[b].push_back(a);
    }

    int s, t;
    cin >> s >> t;
    bfs(s, t);

    cout << dist[t] << endl;
    return 0;
}
